from django.shortcuts import render
from app_demo.models import Employee,Sales,SalesItem,Customer
from django.db.models import Max,Min,Sum
from django.views.generic import ListView,CreateView,UpdateView,DeleteView
from app_demo.forms import EmployeeForm,SalesForm,SalesItemForm,CustomerForm
from django.urls import reverse,reverse_lazy
from django.contrib import messages
import app_demo.data_utils as data_utils
import app_demo.data.context_menu as ctxt_menu
import plotly.express as px
from plotly.offline import plot
import pandas as pd

dict_period = {}

# Dumy url for context menu
def index_context_menu(request):
  return render(request, 'app_demo/main.html')

# All Index Base View Here ......................................................................
def index_main(request):
  messages.add_message(request, messages.INFO, "Hello world.")
  return render(request, 'app_demo/main.html')

def index_courses(request):
    emps = Employee.objects.all()
    dict_context = {}
    dict_context['employee_list'] = emps
    return render(request,'app_demo/cards.html',context=dict_context)

# Class Base View of Employee ...................................................................
def index_employees(request):
    dict_context = {}
    dict_context['employee_list'] = Employee.objects.all()
    dict_context['list_dict_menu'] = ctxt_menu.ContextMenuProvider.get_instance()._get_context_menu('employee_right_click')
    return render(request, 'app_demo/list_employee.html', context=dict_context)

class EmployeeListView(ListView):
    model = Employee
    template_name = 'app_demo/list_employee.html'
    # employee_list is the variable generated by ListVIew model

class EmployeeCreateView(CreateView):
    form_class = EmployeeForm
    model = Employee
    template_name = 'app_demo/detail_employee.html'
    success_url = reverse_lazy('app_demo:index_employees')

class EmployeeUpdateView(UpdateView):
    form_class = EmployeeForm
    model = Employee
    template_name = 'app_demo/detail_employee.html'
    success_url = reverse_lazy('app_demo:index_employees')

    def form_valid(self, form):
        print('Employee Saved')
        return super().form_valid(form)

class EmployeeDeleteView(DeleteView):
    model = Employee
    template_name = 'app_demo/delete_any.html'
    success_url = reverse_lazy('app_demo:index_employees')

# Class/Index Base View of Sales and ........................................................................

class SalesListView(ListView):
    model = Sales
    template_name = 'app_demo/tree_list_sales.html'
    # sales_list is the variable generated by ListVIew model

def index_sales_tree(request):
    dict_range = Sales.objects.aggregate(dt_min_sales=Min("date"), dt_max_sales=Max("date"))
    print(dict_range)
    dt_min = dict_range['dt_min_sales']
    dt_max = dict_range['dt_max_sales']
    global dict_period
    dict_period, list_dict_tree = data_utils.get_period_tree(dt_min, dt_max)
    sales = Sales.objects.all()

    dict_context = {}
    dict_context['tree_nodes_sales'] = list_dict_tree
    dict_context['dict_period'] = dict_period
    dict_context['sales_list'] = sales
    return render(request, 'app_demo/tree_list_sales.html', context=dict_context)

def index_sales_list(request):
    node_id = request.GET['row_id']
    global dict_period
    from_date = dict_period[node_id]['from_date']
    to_date = dict_period[node_id]['to_date']
    sales = Sales.objects.filter(date__gte=from_date, date__lte=to_date)

    dict_sub_menu1 = {'name': 'CSV File','icon':'fa fa-file-text-o'}
    dict_sub_menu2 = {'name': 'Excel File','icon':'fa fa-file-excel-o'}
    list_dict_submenu = [dict_sub_menu1,dict_sub_menu2]

    dict_menu1 = {'name': 'Export','icon':'fa fa-share','children':list_dict_submenu}
    dict_menu2 = {'name': 'Import','icon':'fa fa-reply'}
    list_dict_menu = [dict_menu1,dict_menu2]
    print(dict_menu1['children'])

    dict_context = {}
    dict_context['sales_list'] = sales
    dict_context['list_dict_menu'] = ctxt_menu.ContextMenuProvider.get_instance()._get_context_menu('sales_right_click')
    return render(request, 'app_demo/list_sales.html', context=dict_context)

class SalesUpdateView(UpdateView):
    form_class = SalesForm
    model = Sales
    template_name = 'app_demo/detail_sales.html'

    def get_success_url(self, **kwargs):
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.id,))

class SalesDeleteView(DeleteView):
    model = Sales
    template_name = 'app_demo/delete_any.html'
    success_url = reverse_lazy('app_demo:index_sales')

# Class/Index Base View of SalesItem.........................................................................

def index_sales_master_detail(request,sales_id):
    obj_sales = Sales.objects.get(id=sales_id)
    list_sales_item = SalesItem.objects.filter(sales=obj_sales)
    return render(request, 'app_demo/master_detail_sales.html', context={'sales':obj_sales,'sales_items':list_sales_item})

def index_sales_item_list(request):
    sales_id = request.GET['row_id']
    obj_sales = Sales.objects.get(id=sales_id)
    list_sales_item = SalesItem.objects.filter(sales=obj_sales)
    print(list_sales_item)
    print('-----------------')
    dict_context = {}
    dict_context['sales_item_list'] = list_sales_item
    return render(request, 'app_demo/list_sales_item.html',context=dict_context)

class SalesItemCreateView(CreateView):
    form_class = SalesItemForm
    model = SalesItem
    template_name = 'app_demo/detail_sales_item.html'

    def get_initial(self, **kwargs):
        obj_sales = Sales.objects.get(id=self.kwargs.get('fk'))
        return {'qty': 1,'sales':obj_sales}

    def get_success_url(self, **kwargs):
        obj_sales = Sales.objects.get(id=self.kwargs.get('fk'))
        update_salee(obj_sales)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

class SalesItemUpdateView(UpdateView):
    form_class = SalesItemForm
    model = SalesItem
    template_name = 'app_demo/detail_sales_item.html'

    def get_success_url(self, **kwargs):
        update_salee(self.object.sales)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

class SalesItemDeleteView(DeleteView):
    model = SalesItem
    template_name = 'app_demo/delete_any.html'

    def get_success_url(self, **kwargs):
        update_salee(self.object.sales,self.object)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

def update_salee(sales,deleteditem=None):
    list_sales_item = SalesItem.objects.filter(sales=sales)
    if deleteditem != None:
        list_sales_item = [si for si in list_sales_item if si.id != deleteditem.id]
    gross_amt = sum([si.amount for si in list_sales_item])
    dist_amt = (gross_amt * sales.disc_rate)/100
    sales.gross_amount = gross_amt
    sales.disc_amount = dist_amt
    sales.net_amount = gross_amt - dist_amt
    sales.save()
    pass

# Class and Index Base View of Customer ...................................................................
class CustomerListView(ListView):
    model = Customer
    template_name = 'app_demo/list_customer.html'
    # customer_list is the variable generated by ListVIew model

def index_customers(request):
    # Chart for customer wise total sales
    qs_sum_sales_by_cust = Sales.objects.values('customer').annotate(total_sales=Sum('net_amount')).order_by('customer')
    df_sum_sales_by_cust = pd.DataFrame.from_records(qs_sum_sales_by_cust)
    df_sum_sales_by_cust = df_sum_sales_by_cust.rename(columns={'total_sales': 'Total Sales', 'customer': 'Customer ID'})
    fig = px.bar(df_sum_sales_by_cust, x='Customer ID', y="Total Sales", title='Customer wise Total Sales')
    fig.update_layout(autosize=False,width=840,height=330,margin=dict( l=10,r=10, b=10, t=30,pad=4),)
    fig.update_traces(marker_color='cadetblue')
    fig.update_layout(paper_bgcolor="aliceblue")
    chart_bar_sales = plot({'data': fig}, output_type='div')

    dict_context = {}
    dict_context['customer_list'] = Customer.objects.all()
    dict_context['chart_bar_sales'] = chart_bar_sales
    return render(request, 'app_demo/list_customer.html', context=dict_context)

class CustomerCreateView(CreateView):
    form_class = CustomerForm
    model = Customer
    template_name = 'app_demo/detail_customer.html'
    success_url = reverse_lazy('app_demo:index_customers')

class CustomerUpdateView(UpdateView):
    form_class = CustomerForm
    model = Customer
    template_name = 'app_demo/detail_customer.html'
    success_url = reverse_lazy('app_demo:index_customers')

    def form_valid(self, form):
        print('Customr Saved')
        return super().form_valid(form)

    def form_invalid(self, form):
        print('Customr not saved')
        return super().form_invalid(form)

class CustomerDeleteView(DeleteView):
    model = Customer
    template_name = 'app_demo/delete_any.html'
    success_url = reverse_lazy('app_demo:index_customers')

def index_bar_chart_sales(request):
    cust_id = request.GET['row_id']
    obj_cust = Customer.objects.get(id=cust_id)
    qs_sales = Sales.objects.filter(customer=obj_cust).order_by('date')
    df_sales = pd.DataFrame.from_records(qs_sales.values())
    df_sales = df_sales.rename(columns={'net_amount': 'Amount', 'date': 'Sales Date'})
    fig = px.line(df_sales, x='Sales Date', y="Amount",markers=True,title='Sales trend for customer : '+obj_cust.name)
    fig.update_layout(autosize=False,width=840,height=330,margin=dict( l=10,r=10, b=10, t=30,pad=4),)
    fig.update_traces(line_color='cadetblue')
    fig.update_layout(paper_bgcolor="aliceblue")
    chart_Line_sales = plot({'data': fig}, output_type='div')
    return render(request, 'app_demo/charts/bar_chart_sales.html', context={'chart_Line_sales':chart_Line_sales})