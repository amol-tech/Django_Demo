from django.shortcuts import render
from app_demo.models import Employee,Sales,SalesItem
from django.views.generic import ListView,CreateView,UpdateView,DeleteView
from app_demo.forms import EmployeeForm,SalesForm,SalesItemForm
from django.urls import reverse,reverse_lazy
from django.contrib import messages
from django.http import HttpResponseRedirect

# All Index Base View Here ......................................................................
def index_main(request):
  messages.add_message(request, messages.INFO, "Hello world.")
  return render(request, 'app_demo/main.html')

# Class Base View of Employee ...................................................................
class EmployeeListView(ListView):
    model = Employee
    template_name = 'app_demo/list_employee.html'
    # employee_list is the variable generated by ListVIew model

class EmployeeCreateView(CreateView):
    form_class = EmployeeForm
    model = Employee
    template_name = 'app_demo/detail_employee.html'
    success_url = reverse_lazy('app_demo:index_employees')

class EmployeeUpdateView(UpdateView):
    form_class = EmployeeForm
    model = Employee
    template_name = 'app_demo/detail_employee.html'
    success_url = reverse_lazy('app_demo:index_employees')
    print('Reached Here ..1')

    def form_valid(self, form):
        messages.success(self.request,"Employee updated successfully!")
        return super().form_valid(form)

class EmployeeDeleteView(DeleteView):
    model = Employee
    template_name = 'app_demo/delete_any.html'
    success_url = reverse_lazy('app_demo:index_employees')

# Class/Index Base View of Sales and SalesItem............................................................

class SalesListView(ListView):
    model = Sales
    template_name = 'app_demo/list_sales.html'
    # sales_list is the variable generated by ListVIew model


class SalesUpdateView(UpdateView):
    form_class = SalesForm
    model = Sales
    template_name = 'app_demo/detail_sales.html'
    #success_url = reverse_lazy('app_demo:index_sales_master_detail',kwargs={'sales_id':self.id})

    def get_success_url(self, **kwargs):
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.id,))

class SalesDeleteView(DeleteView):
    model = Sales
    template_name = 'app_demo/delete_any.html'
    success_url = reverse_lazy('app_demo:index_sales')

def index_sales_master_detail(request,sales_id):
    obj_sales = Sales.objects.get(id=sales_id)
    list_sales_item = SalesItem.objects.filter(sales=obj_sales)
    print('From Detail')
    print(list_sales_item)
    return render(request, 'app_demo/master_detail_sales.html', context={'sales':obj_sales,'sales_items':list_sales_item})

class SalesItemCreateView(CreateView):
    form_class = SalesItemForm
    model = SalesItem
    template_name = 'app_demo/detail_sales_item.html'

    def get_initial(self, **kwargs):
        obj_sales = Sales.objects.get(id=self.kwargs.get('fk'))
        return {'qty': 1,'sales':obj_sales}

    def get_success_url(self, **kwargs):
        obj_sales = Sales.objects.get(id=self.kwargs.get('fk'))
        update_salee(obj_sales)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

class SalesItemUpdateView(UpdateView):
    form_class = SalesItemForm
    model = SalesItem
    template_name = 'app_demo/detail_sales_item.html'

    def get_success_url(self, **kwargs):
        update_salee(self.object.sales)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

class SalesItemDeleteView(DeleteView):
    model = SalesItem
    template_name = 'app_demo/delete_any.html'

    def get_success_url(self, **kwargs):
        update_salee(self.object.sales,self.object)
        return reverse_lazy('app_demo:index_sales_master_detail', args=(self.object.sales.id,))

def update_salee(sales,deleteditem=None):
    list_sales_item = SalesItem.objects.filter(sales=sales)
    if deleteditem != None:
        list_sales_item = [si for si in list_sales_item if si.id != deleteditem.id]
    print('From Delete')
    print(list_sales_item)
    gross_amt = sum([si.amount for si in list_sales_item])
    dist_amt = (gross_amt * sales.disc_rate)/100
    sales.gross_amount = gross_amt
    sales.disc_amount = dist_amt
    sales.net_amount = gross_amt - dist_amt
    print(gross_amt)
    sales.save()
    pass
